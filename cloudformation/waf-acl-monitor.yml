AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS WAF ACL Monitor - Sistema de alertas para cambios en ACLs WAF'

Parameters:
  Region:
    Type: String
    Description: 'Regi칩n AWS donde se desplegar치n los recursos'
    Default: 'us-east-1'
    AllowedValues:
      - 'us-east-1'
      - 'us-east-2'
      - 'us-west-1'
      - 'us-west-2'
      - 'eu-west-1'
      - 'eu-central-1'
      - 'ap-southeast-1'
      - 'ap-southeast-2'
  LogRetentionDays:
    Type: Number
    Description: 'D칤as de retenci칩n para logs de CloudWatch'
    Default: 30
    MinValue: 1
    MaxValue: 365
    ConstraintDescription: 'Debe estar entre 1 y 365 d칤as'
  DynamoDBTableName:
    Type: String
    Description: 'Nombre de la tabla DynamoDB para historial de cambios de ACLs'
    Default: 'waf-acl-monitor-history'

Resources:
  WAFACLAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'waf-acl-alerts-${AWS::StackName}'
      DisplayName: 'WAF ACL Changes Alerts'

  WAFMonitorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/waf/acl-monitor/${AWS::StackName}'
      RetentionInDays: !Ref LogRetentionDays

  WAFMonitorDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: account_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: account_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  WAFMonitorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: WAFMonitorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - wafv2:ListWebACLs
                  - wafv2:GetWebACL
                  - sns:Publish
                  - cloudwatch:PutMetricData
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - cloudtrail:LookupEvents
                Resource: '*'

  WAFMonitorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'waf-acl-monitor-${AWS::StackName}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt WAFMonitorRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref WAFACLAlertsTopic
          LOG_GROUP_NAME: !Ref WAFMonitorLogGroup
          REGION: !Ref Region
          AWS_STACK_NAME: !Ref AWS::StackName
          DYNAMODB_TABLE: !Ref DynamoDBTableName
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging
          from datetime import datetime, timezone

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def get_previous_acl_state(dynamodb, table_name, acl_id):
              try:
                  resp = dynamodb.get_item(
                      TableName=table_name,
                      Key={
                          'account_id': {'S': 'STATE'},
                          'timestamp': {'S': acl_id}
                      }
                  )
                  item = resp.get('Item')
                  if item and 'acl_state' in item:
                      return json.loads(item['acl_state']['S'])
                  return None
              except Exception as e:
                  logger.error(f"Error leyendo estado anterior de ACL {acl_id}: {e}")
                  return None

          def save_acl_state(dynamodb, table_name, acl_id, acl_state):
              try:
                  dynamodb.put_item(
                      TableName=table_name,
                      Item={
                          'account_id': {'S': 'STATE'},
                          'timestamp': {'S': acl_id},
                          'acl_state': {'S': json.dumps(acl_state)}
                      }
                  )
              except Exception as e:
                  logger.error(f"Error guardando estado de ACL {acl_id}: {e}")

          def diff_rules(old_rules, new_rules):
              old_dict = {r['name']: r for r in old_rules} if old_rules else {}
              new_dict = {r['name']: r for r in new_rules} if new_rules else {}
              changes = []
              # Agregadas
              for name in new_dict:
                  if name not in old_dict:
                      changes.append(f"Regla agregada: {name}")
              # Eliminadas
              for name in old_dict:
                  if name not in new_dict:
                      changes.append(f"Regla eliminada: {name}")
              # Modificadas
              for name in new_dict:
                  if name in old_dict and new_dict[name] != old_dict[name]:
                      changes.append(f"Regla modificada: {name}")
              return changes

          def lambda_handler(event, context):
              logger.info("INICIO LAMBDA (triggered by CloudTrail event)")
              try:
                  region = os.environ.get('REGION', 'us-east-1')
                  sns_topic_arn = os.environ.get('SNS_TOPIC_ARN')
                  table_name = os.environ.get('DYNAMODB_TABLE')
                  dynamodb = boto3.client('dynamodb', region_name=region)
                  sns = boto3.client('sns', region_name=region)

                  # El evento CloudTrail viene en event['detail']
                  detail = event.get('detail', {})
                  event_name = detail.get('eventName', 'Desconocido')
                  event_time = detail.get('eventTime', datetime.now(timezone.utc).isoformat())
                  user_identity = detail.get('userIdentity', {})
                  request_params = detail.get('requestParameters', {})
                  response_elements = detail.get('responseElements', {})

                  # Extraer info de usuario (incluyendo federado SSO)
                  arn = user_identity.get('arn', '')
                  principal_id = user_identity.get('principalId', '')
                  user_type = user_identity.get('type', '')
                  if user_type == 'AssumedRole' and 'AWSReservedSSO' in arn:
                      session_issuer = user_identity.get('sessionContext', {}).get('sessionIssuer', {})
                      sso_user = arn.split('/')[-1]
                      sso_role = session_issuer.get('userName', 'Desconocido')
                      user_display = f"federado: {sso_user} (rol: {sso_role})"
                  else:
                      user_display = arn or principal_id or 'Desconocido'

                  # Extraer info del ACL
                  acl_name = request_params.get('name') or request_params.get('Name') or 'Desconocido'
                  acl_id = request_params.get('id') or request_params.get('Id') or 'Desconocido'
                  acl_scope = request_params.get('scope') or request_params.get('Scope') or 'REGIONAL'
                  acl_arn = None
                  # Buscar ARN en responseElements si est치
                  if response_elements:
                      acl_arn = response_elements.get('summary', {}).get('ARN') or response_elements.get('webACL', {}).get('ARN')
                  if not acl_arn and 'resources' in detail:
                      # A veces CloudTrail pone el ARN en resources
                      for r in detail['resources']:
                          if r.get('ARN'):
                              acl_arn = r['ARN']
                              break

                  # Obtener reglas actuales
                  new_rules = request_params.get('rules', [])
                  # Leer estado anterior
                  previous_state = get_previous_acl_state(dynamodb, table_name, str(acl_id))
                  old_rules = previous_state.get('rules', []) if previous_state else []
                  # Calcular diferencias
                  cambios = diff_rules(old_rules, new_rules)
                  if not cambios:
                      cambios = ['Sin cambios detectados en las reglas.']

                  # Guardar nuevo estado para el ACL
                  save_acl_state(dynamodb, table_name, str(acl_id), request_params)

                  # Guardar historial de evento
                  account_id = user_identity.get('accountId', 'Desconocido')
                  timestamp = event_time
                  item = {
                      'account_id': {'S': account_id},
                      'timestamp': {'S': timestamp},
                      'event_name': {'S': event_name},
                      'acl_name': {'S': acl_name},
                      'acl_id': {'S': str(acl_id)},
                      'acl_scope': {'S': acl_scope},
                      'acl_arn': {'S': acl_arn or ''},
                      'user': {'S': user_display},
                      'user_type': {'S': user_type},
                      'raw_event': {'S': json.dumps(detail)}
                  }
                  dynamodb.put_item(TableName=table_name, Item=item)

                  # Construir mensaje SNS
                  message = (
                      f"游뚿 Cambio detectado en AWS WAF ACL\n\n"
                      f"Tipo de evento: {event_name}\n"
                      f"ACL: {acl_name} (ID: {acl_id}, Scope: {acl_scope})\n"
                      f"ARN: {acl_arn or 'No disponible'}\n"
                      f"Usuario responsable: {user_display}\n"
                      f"Tipo de usuario: {user_type}\n"
                      f"Timestamp: {timestamp}\n"
                      f"Cuenta: {account_id}\n"
                      f"Regi칩n: {region}\n\n"
                      f"Cambios detectados en las reglas:\n- " + "\n- ".join(cambios) + "\n"
                  )
                  sns.publish(
                      TopicArn=sns_topic_arn,
                      Subject="Alerta de cambio en AWS WAF ACL",
                      Message=message
                  )
                  logger.info("Alerta publicada en SNS.")
                  return {'statusCode': 200, 'body': json.dumps({'message': 'Alerta enviada y guardada en DynamoDB'})}
              except Exception as e:
                  logger.error(f"Excepci칩n inesperada: {e}", exc_info=True)
                  raise

  WAFMonitorEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub 'waf-acl-monitor-event-rule-${AWS::StackName}'
      Description: 'Regla para detectar cambios en WAF ACLs via CloudTrail'
      EventPattern:
        source:
          - aws.wafv2
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - wafv2.amazonaws.com
          eventName:
            - CreateWebACL
            - UpdateWebACL
            - DeleteWebACL
      State: ENABLED
      Targets:
        - Arn: !GetAtt WAFMonitorFunction.Arn
          Id: WAFMonitorTarget

  WAFMonitorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WAFMonitorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WAFMonitorEventRule.Arn

  WAFACLChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'waf-acl-changes-alarm-${AWS::StackName}'
      AlarmDescription: 'Alerta cuando se detectan cambios en ACLs WAF'
      MetricName: WAFACLChanges
      Namespace: AWS/WAF
      Statistic: Sum
      Period: 60 # Fijo a 60 segundos para monitoreo por eventos
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref WAFACLAlertsTopic
      Dimensions:
        - Name: Region
          Value: !Ref Region
        - Name: StackName
          Value: !Ref AWS::StackName

Outputs:
  SNSTopicArn:
    Description: 'ARN del SNS Topic para alertas'
    Value: !Ref WAFACLAlertsTopic
  LambdaFunctionArn:
    Description: 'ARN de la funci칩n Lambda de monitoreo'
    Value: !GetAtt WAFMonitorFunction.Arn
  CloudWatchLogGroup:
    Description: 'Nombre del grupo de logs de CloudWatch'
    Value: !Ref WAFMonitorLogGroup
  CloudWatchAlarm:
    Description: 'Nombre de la alarma de CloudWatch'
    Value: !Ref WAFACLChangesAlarm 